#include <iostream>
#include <cstdlib>
#include <ctime>
#include <vector>
#include <algorithm>

using namespace std;

string getRandomWord();
bool isValidGuess(const string& guess, const string& availableLetters);
bool containsLetter(const string& word, char letter);
void displayWordWithGuesses(const string& word, const vector<char>& guesses);

int main() {
    srand(static_cast<unsigned int>(time(nullptr)));

    string word = getRandomWord();
    cout << "The word has 5 letters." << endl;

    vector<char> availableLetters(word.begin(), word.end());
    random_shuffle(availableLetters.begin(), availableLetters.end());

    cout << "The letters you can use to guess are: ";
    for (char letter : availableLetters) {
        cout << letter << " ";
    }
    cout << endl;

    vector<char> guesses;
    int remainingAttempts = 3;

    while (remainingAttempts > 0) {
        cout << "You have " << remainingAttempts << " attempt(s) left." << endl;
        cout << "Enter your guess: ";
        string guess;
        cin >> guess;

        if (!isValidGuess(guess, word)) {
            cout << "Invalid guess. Please try again." << endl;
            continue;
        }

        char guessedLetter = guess[0];

        if (containsLetter(word, guessedLetter)) {
            cout << "Correct guess!" << endl;
            guesses.push_back(guessedLetter);
            displayWordWithGuesses(word, guesses);
            if (guesses.size() == word.length()) {
                cout << "Congratulations! You guessed the word!" << endl;
                break;
            }
        } else {
            cout << "Incorrect guess." << endl;
            remainingAttempts--;
        }
    }

    if (remainingAttempts == 0) {
        cout << "Sorry, you ran out of attempts. The word was: " << word << endl;
    }

    return 0;
}

string getRandomWord() {
    vector<string> words = {"apple", "bread", "chair", "dance", "eagle", "flute", "grape", "house", "igloo", "jelly"};
    return words[rand() % words.size()];
}

bool isValidGuess(const string& guess, const string& availableLetters) {
    if (guess.length() != 1) {
        return false;
    }

    char guessedLetter = guess[0];
    if (availableLetters.find(guessedLetter) == string::npos) {
        return false;
    }

    return true;
}

bool containsLetter(const string& word, char letter) {
    return word.find(letter) != string::npos;
}

void displayWordWithGuesses(const string& word, const vector<char>& guesses) {
    for (char letter : word) {
        if (find(guesses.begin(), guesses.end(), letter) != guesses.end()) {
            cout << letter << " ";
        } else {
            cout << "_ ";
        }
    }
    cout << endl;
}
